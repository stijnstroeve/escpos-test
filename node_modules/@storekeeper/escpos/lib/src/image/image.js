"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = exports.ImageProvider = void 0;
var constants_1 = require("../constants");
var imageCacheProvider_1 = require("./imageCacheProvider");
var debug_1 = require("../debug");
var rasterImage_1 = require("./rasterImage");
var ImageProvider = /** @class */ (function () {
    function ImageProvider() {
    }
    return ImageProvider;
}());
exports.ImageProvider = ImageProvider;
var Image = /** @class */ (function () {
    function Image() {
    }
    /**
     * Converts the given bitmap into a gray bitmap.
     * @param bitmap
     * @private
     */
    Image.grayBitmap = function (bitmap) {
        var imageGrayscale = new Uint8Array(bitmap.width * bitmap.height);
        for (var i = 0; i < bitmap.data.length; i += bitmap.colors) {
            var r = bitmap.data[i];
            var g = bitmap.data[i + 1];
            var b = bitmap.data[i + 2];
            var a = bitmap.data[i + 3];
            if (a === 0) {
                // If the pixel is fully transparent, we set the pixel to white
                imageGrayscale[i / bitmap.colors] = 0;
            }
            else {
                // If the pixel is fully opaque, we calculate the gray value
                imageGrayscale[Math.floor(i / bitmap.colors)] = 255 - (55 * r + 182 * g + 18 * b) / 255;
            }
        }
        return imageGrayscale;
    };
    /**
     * Converts the given gray bitmap into a dithered bitmap.
     *
     * From: https://github.com/petrkutalek/png2pos/blob/a7aad5f6430775627db83015d8550f7720eecc41/png2pos.c#L393
     * https://tannerhelland.com/2012/12/28/dithering-eleven-algorithms-source-code.html
     * @param bitmap
     * @param grayBitmap
     * @private
     */
    Image.ditherBitmap = function (grayBitmap, _a) {
        var width = _a.width, height = _a.height;
        var dithering_matrix = [
            /* for simplicity of computation, all standard dithering
               formulas push the error forward, never backward */
            { dx: 1, dy: 0, v: 149 /* 1024 * 7 / 48 */ },
            { dx: 2, dy: 0, v: 107 /* 1024 * 5 / 48 */ },
            { dx: -2, dy: 1, v: 64 /* 1024 * 3 / 48 */ },
            { dx: -1, dy: 1, v: 107 /* 1024 * 5 / 48 */ },
            { dx: 0, dy: 1, v: 149 /* 1024 * 7 / 48 */ },
            { dx: 1, dy: 1, v: 107 /* 1024 * 5 / 48 */ },
            { dx: 2, dy: 1, v: 64 /* 1024 * 3 / 48 */ },
            { dx: -2, dy: 2, v: 21 /* 1024 * 1 / 48 */ },
            { dx: -1, dy: 2, v: 64 /* 1024 * 3 / 48 */ },
            { dx: 0, dy: 2, v: 107 /* 1024 * 5 / 48 */ },
            { dx: 1, dy: 2, v: 64 /* 1024 * 3 / 48 */ },
            { dx: 2, dy: 2, v: 21 /* 1024 * 1 / 48 */ }
        ];
        var s_add_to_byte = function (v, d) {
            var a = v + d;
            if (a > 0xff) {
                a = 0xff;
            }
            else if (a < 0) {
                a = 0;
            }
            return a;
        };
        for (var i = 0; i != grayBitmap.length; ++i) {
            var o = grayBitmap[i];
            var n = o <= 0x80 ? 0x00 : 0xff;
            var x = i % width;
            var y = Math.floor(i / width);
            grayBitmap[i] = n;
            for (var j = 0; j != 12; ++j) {
                var x0 = x + dithering_matrix[j].dx;
                var y0 = y + dithering_matrix[j].dy;
                if (x0 > width - 1 || x0 < 0
                    || y0 > height - 1 || y0 < 0) {
                    continue;
                }
                /* the residual quantization error, warning: !have to
                   overcast to signed int before calculation! */
                var d = Math.floor((o - n) * dithering_matrix[j].v / 1024);
                /* keep a value in the <min; max> interval */
                grayBitmap[x0 + width * y0] = s_add_to_byte(grayBitmap[x0 + width * y0], d);
            }
        }
        return grayBitmap;
    };
    Image.getCacheKey = function (url, options) {
        return url + '-' + constants_1.IMAGE_CACHE_VERSION + '-' + JSON.stringify(options);
    };
    Image.loadFromUrl = function (provider, url, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var cacheKey, cachedImageData, image, metadata, imageBitmap, rasterImage;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (options.width > constants_1.MAX_IMAGE_WIDTH) {
                            options.width = constants_1.MAX_IMAGE_WIDTH;
                        }
                        cacheKey = Image.getCacheKey(url, options);
                        if (!imageCacheProvider_1.imageCacheProvider) return [3 /*break*/, 2];
                        return [4 /*yield*/, imageCacheProvider_1.imageCacheProvider.get(cacheKey)];
                    case 1:
                        cachedImageData = _a.sent();
                        if (cachedImageData) {
                            debug_1.Debug.process('Loaded image from cache');
                            return [2 /*return*/, cachedImageData];
                        }
                        _a.label = 2;
                    case 2: return [4 /*yield*/, provider.load(url, options)];
                    case 3:
                        image = _a.sent();
                        if (!image)
                            return [2 /*return*/, null];
                        metadata = {
                            colors: image.colors,
                            width: image.width,
                            rasterWidth: Math.ceil(image.width / 8),
                            height: image.height,
                        };
                        imageBitmap = Image.grayBitmap(image);
                        if (!options.disableImageDithering) {
                            imageBitmap = Image.ditherBitmap(imageBitmap, metadata);
                        }
                        rasterImage = rasterImage_1.RasterImageGenerator.fromBitmap(imageBitmap, metadata.width, metadata.height);
                        if (!imageCacheProvider_1.imageCacheProvider) return [3 /*break*/, 5];
                        return [4 /*yield*/, imageCacheProvider_1.imageCacheProvider.set(cacheKey, rasterImage)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, rasterImage];
                }
            });
        });
    };
    return Image;
}());
exports.Image = Image;
//# sourceMappingURL=image.js.map