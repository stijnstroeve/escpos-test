"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.USBDevice = void 0;
var escpos_device_1 = require("@storekeeper/escpos-device");
var usb_1 = require("usb");
var endpoint_1 = require("usb/dist/usb/endpoint");
var os = require("os");
var util_1 = require("util");
var usbPackage = require('usb/dist/usb');
var IFACE_CLASS = {
    AUDIO: 0x01,
    HID: 0x03,
    PRINTER: 0x07,
    HUB: 0x09
};
/**
 * Convenience method to get the device with the specified serial number, or `undefined` if no such device is present.
 *
 * This copy is a copy of the method defined in the library: https://github.com/node-usb/node-usb/blob/99a6b11b35ac13a4bfd2e8f0fc2d9ef80978d43d/tsc/index.ts#L23
 * The only difference is that this implementation also cleans the serial number before comparing them.
 * @param serialNumber
 */
var findBySerialNumber = function (serialNumber) { return __awaiter(void 0, void 0, void 0, function () {
    var devices, opened, _i, devices_1, device, getStringDescriptor, buffer, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                devices = usb_1.usb.getDeviceList();
                opened = function (device) { return !!device.interfaces; };
                _i = 0, devices_1 = devices;
                _b.label = 1;
            case 1:
                if (!(_i < devices_1.length)) return [3 /*break*/, 7];
                device = devices_1[_i];
                _b.label = 2;
            case 2:
                _b.trys.push([2, 4, 5, 6]);
                if (!opened(device)) {
                    device.open();
                }
                getStringDescriptor = (0, util_1.promisify)(device.getStringDescriptor).bind(device);
                return [4 /*yield*/, getStringDescriptor(device.deviceDescriptor.iSerialNumber)];
            case 3:
                buffer = _b.sent();
                buffer = buffer.replace(/\0.*$/g, ''); // Only change compared to the on from the library.
                if (buffer && buffer.toString() === serialNumber) {
                    return [2 /*return*/, device];
                }
                return [3 /*break*/, 6];
            case 4:
                _a = _b.sent();
                return [3 /*break*/, 6];
            case 5:
                try {
                    if (opened(device)) {
                        device.close();
                    }
                }
                catch (_c) {
                    // Ignore any errors, device may be a system device or inaccessible
                }
                return [7 /*endfinally*/];
            case 6:
                _i++;
                return [3 /*break*/, 1];
            case 7: return [2 /*return*/, undefined];
        }
    });
}); };
var parseDeviceId = function (id) {
    var splitId = id.split('-');
    if (splitId.length < 3)
        return undefined;
    var vendorIdHex = splitId[0];
    var vendorId = parseInt(vendorIdHex, 16);
    var productIdHex = splitId[1];
    var productId = parseInt(productIdHex, 16);
    if (isNaN(vendorId) || isNaN(productId))
        return undefined;
    var serialNumber = splitId.slice(2).join('-');
    return {
        vendorId: vendorId,
        productId: productId,
        serialNumber: serialNumber
    };
};
var USBDevice = /** @class */ (function (_super) {
    __extends(USBDevice, _super);
    function USBDevice() {
        return _super.call(this) || this;
    }
    USBDevice.prototype.initialize = function (vendorId, productId) {
        this.device = (0, usb_1.findByIds)(vendorId, productId);
        if (!this.device) {
            throw new Error('USB device not found');
        }
    };
    USBDevice.prototype.initializeBySerial = function (serial) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, findBySerialNumber(serial)];
                    case 1:
                        _a.device = _b.sent();
                        if (!this.device) {
                            throw new Error('USB device not found');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    USBDevice.prototype.initializeById = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var deviceId, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        deviceId = parseDeviceId(id);
                        if (!(deviceId === null || deviceId === void 0 ? void 0 : deviceId.serialNumber)) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, findBySerialNumber(deviceId.serialNumber)];
                    case 1:
                        _a.device = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!this.device) {
                            throw new Error('USB device not found');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    USBDevice.prototype.open = function () {
        var _this = this;
        if (this.connected || !this.device)
            return;
        this.device.open();
        this.device.interfaces.forEach(function (iface) {
            iface.setAltSetting(iface.altSetting, function () {
                if (os.platform() !== 'win32') {
                    if (iface.isKernelDriverActive()) {
                        try {
                            iface.detachKernelDriver();
                        }
                        catch (e) {
                            throw new Error('[ERROR] Could not detatch kernel driver: ' + e);
                        }
                    }
                }
                iface.claim();
                iface.endpoints.filter(function (endpoint) {
                    if (endpoint.direction == 'out' && !_this.endpoint && endpoint instanceof endpoint_1.OutEndpoint) {
                        _this.endpoint = endpoint;
                        _this.iface = iface;
                        _this.emit('connect');
                    }
                });
            });
        });
        // Handle usb device disconnect
        usbPackage.on('detach', function (device) {
            if (device === _this.device) {
                _this.close();
            }
        });
    };
    USBDevice.prototype.write = function (data, cb) {
        var _this = this;
        if (!this.device) {
            return cb === null || cb === void 0 ? void 0 : cb('No device initialized');
        }
        this.endpoint.transfer(Buffer.from(data), function (err) {
            if (!err) {
                _this.emit('data_write', data);
                cb === null || cb === void 0 ? void 0 : cb();
            }
            else {
                _this.emit('error', err);
                cb === null || cb === void 0 ? void 0 : cb(err);
            }
        });
    };
    USBDevice.prototype.close = function () {
        var _this = this;
        if (!this.connected || !this.device)
            return;
        this.iface.release(true, function () {
            if (os.platform() !== 'win32') {
                if (!_this.iface.isKernelDriverActive()) {
                    _this.iface.attachKernelDriver();
                }
            }
            _this.device.close();
            usb_1.usb.removeAllListeners('detach');
            _this.emit('close');
        });
    };
    USBDevice.prototype.getDeviceInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.device)
                    throw new Error('No device initialized');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.device.open();
                        _this.device.getStringDescriptor(_this.device.deviceDescriptor.iManufacturer, function (err, manufacturer) {
                            if (err)
                                return reject(err);
                            _this.device.getStringDescriptor(_this.device.deviceDescriptor.iProduct, function (err, product) {
                                if (err)
                                    return reject(err);
                                _this.device.getStringDescriptor(_this.device.deviceDescriptor.iSerialNumber, function (err, serialNumber) {
                                    if (err)
                                        return reject(err);
                                    serialNumber = serialNumber.replace(/\0.*$/g, '');
                                    _this.device.close();
                                    var vendorId = _this.device.deviceDescriptor.idVendor;
                                    var vendorIdHex = vendorId.toString(16).padStart(4, '0');
                                    var productId = _this.device.deviceDescriptor.idProduct;
                                    var productIdHex = productId.toString(16).padStart(4, '0');
                                    resolve({
                                        id: vendorIdHex + '-' + productIdHex + '-' + serialNumber,
                                        name: manufacturer + ' ' + product + ' (serial: ' + serialNumber + ')',
                                        type: 'usb',
                                        data: {
                                            vendorIdHex: vendorIdHex,
                                            productIdHex: productIdHex,
                                            manufacturer: manufacturer,
                                            product: product,
                                            serialNumber: serialNumber
                                        }
                                    });
                                });
                            });
                        });
                    })];
            });
        });
    };
    USBDevice.findUSBDevices = function () {
        return (0, usb_1.getDeviceList)().filter(function (device) {
            try {
                return device.configDescriptor.interfaces.filter(function (iface) {
                    return iface.filter(function (conf) {
                        return conf.bInterfaceClass === IFACE_CLASS.PRINTER;
                    }).length;
                }).length;
            }
            catch (e) {
                return false;
            }
        });
    };
    return USBDevice;
}(escpos_device_1.Device));
exports.USBDevice = USBDevice;
//# sourceMappingURL=usbDevice.js.map