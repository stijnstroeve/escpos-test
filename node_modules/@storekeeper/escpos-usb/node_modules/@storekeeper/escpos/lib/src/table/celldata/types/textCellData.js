"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextCellData = void 0;
var cellData_1 = require("../cellData");
var cellDataType_1 = require("../cellDataType");
var utils_1 = require("../../../utils");
var sanitizeText = function (text) {
    // Replace escape characters
    text = text.replace(/\n/g, ' '); // Newline (Line Feed)
    text = text.replace(/\r/g, ' '); // Carriage Return
    text = text.replace(/\f/g, ' '); // Formfeed Page Break
    return text;
};
var TextCellData = /** @class */ (function (_super) {
    __extends(TextCellData, _super);
    function TextCellData(text) {
        return _super.call(this, cellDataType_1.CellDataType.TEXT, text) || this;
    }
    TextCellData.prototype.getTextLines = function (row, column, compiler) {
        var columnCharWidth = compiler.getColumnCharacterWidth(row.size, column.width);
        var text = sanitizeText(this.data);
        return utils_1.Utils.breakOnWord(text, columnCharWidth);
    };
    return TextCellData;
}(cellData_1.CellData));
exports.TextCellData = TextCellData;
//# sourceMappingURL=textCellData.js.map