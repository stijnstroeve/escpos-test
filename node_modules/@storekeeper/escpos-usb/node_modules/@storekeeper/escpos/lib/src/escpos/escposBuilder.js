"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EscPosBuilder = void 0;
var escposCompiler_1 = require("./escposCompiler");
var escposCommands_1 = require("./escposCommands");
var textCommand_1 = require("./commands/textCommand");
var tableCommand_1 = require("./commands/tableCommand");
var barcodeCommand_1 = require("./commands/barcodeCommand");
var lineCommand_1 = require("./commands/lineCommand");
var lineFeedCommand_1 = require("./commands/lineFeedCommand");
var cutCommand_1 = require("./commands/cutCommand");
var rawCommand_1 = require("./commands/rawCommand");
var imageCommand_1 = require("./commands/imageCommand");
var lineSpacingCommand_1 = require("./commands/lineSpacingCommand");
var iconv = require("iconv-lite");
var EscPosBuilder = /** @class */ (function () {
    function EscPosBuilder() {
        this.commands = [];
    }
    /**
     * Adds a new text layout item.
     * @param text The text to display.
     * @param options
     */
    EscPosBuilder.prototype.text = function (text, options) {
        options = options || {};
        // Make sure the text is not empty
        if (!text || !text.toString().trim())
            return this;
        this.addCommand(new textCommand_1.TextCommand(text, options));
        return this;
    };
    EscPosBuilder.prototype.table = function (table) {
        this.addCommand(new tableCommand_1.TableCommand(table));
        return this;
    };
    EscPosBuilder.prototype.barcode = function (barcode, options) {
        options = options || {};
        this.addCommand(new barcodeCommand_1.BarcodeCommand(barcode, options));
        return this;
    };
    EscPosBuilder.prototype.line = function (options) {
        this.addCommand(new lineCommand_1.LineCommand(options));
        return this;
    };
    EscPosBuilder.prototype.linefeed = function (amount) {
        if (amount === void 0) { amount = 1; }
        this.addCommand(new lineFeedCommand_1.LineFeedCommand(amount));
        return this;
    };
    EscPosBuilder.prototype.lineSpacing = function (spacing) {
        this.addCommand(new lineSpacingCommand_1.LineSpacingCommand(spacing));
        return this;
    };
    EscPosBuilder.prototype.cut = function () {
        this.addCommand(new cutCommand_1.CutCommand());
        return this;
    };
    /**
     * Should only be used for development purposes.
     */
    EscPosBuilder.prototype.raw = function (data) {
        this.addCommand(new rawCommand_1.RawCommand(data));
        return this;
    };
    EscPosBuilder.prototype.image = function (url, options) {
        options = options || {};
        this.addCommand(new imageCommand_1.ImageCommand(url, options));
        return this;
    };
    EscPosBuilder.prototype.build = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var data, compiler, _i, _a, command, commandResult, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        data = __spreadArray(__spreadArray(__spreadArray([], escposCommands_1.EscPos.HW_RESET, true), escposCommands_1.EscPos.HW_INIT, true), escposCommands_1.EscPos.CTL_LF, true);
                        if (options.textEncoding && !iconv.encodingExists(options.textEncoding)) {
                            return [2 /*return*/, Promise.reject("Unsupported text encoding " + options.textEncoding)];
                        }
                        compiler = new escposCompiler_1.EscPosCompiler({
                            fontAMaxChars: options.fontAMaxChars || 48,
                            fontBMaxChars: options.fontBMaxChars || 64,
                            imageProvider: options.imageProvider,
                            textEncoding: options.textEncoding
                        });
                        _i = 0, _a = this.commands;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 6];
                        command = _a[_i];
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        if (command.key === 'image' && !options.imageProvider) {
                            // We have no image provider, so skip this command
                            return [3 /*break*/, 5];
                        }
                        return [4 /*yield*/, command.build(compiler)];
                    case 3:
                        commandResult = _b.sent();
                        // Please note: Don't change this to Array.concat() because it will fail with large arrays.
                        data = __spreadArray(__spreadArray([], data, true), commandResult, true);
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _b.sent();
                        // If the command fails, we just skip it if the "skipCommandOnError" is true. Otherwise, we throw the error.
                        if (!options.skipCommandOnError) {
                            throw e_1;
                        }
                        return [3 /*break*/, 5];
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, Uint8Array.from(data)];
                }
            });
        });
    };
    EscPosBuilder.prototype.serialize = function () {
        return JSON.stringify(this.commands);
    };
    EscPosBuilder.prototype.addCommand = function (command) {
        this.commands.push(command);
    };
    EscPosBuilder.from = function (serializedCommands) {
        var builder = new EscPosBuilder();
        var parsed = JSON.parse(serializedCommands);
        // Make sure the parse result is an array
        if (!Array.isArray(parsed)) {
            throw new ParseSerializedCommandsError('Not an array');
        }
        // Make sure every command has a key.
        if (!parsed.every(function (c) { return c && c.key; })) {
            throw new ParseSerializedCommandsError('Not every command has a key');
        }
        for (var _i = 0, parsed_1 = parsed; _i < parsed_1.length; _i++) {
            var rawCommand = parsed_1[_i];
            var key = rawCommand.key, params = __rest(rawCommand, ["key"]);
            var commandClass = escposCommands_1.COMMAND_MAP[key];
            var command = new (commandClass.bind.apply(commandClass, __spreadArray([void 0], Object.values(params), false)))();
            builder.addCommand(command);
        }
        return builder;
    };
    return EscPosBuilder;
}());
exports.EscPosBuilder = EscPosBuilder;
var ParseSerializedCommandsError = /** @class */ (function (_super) {
    __extends(ParseSerializedCommandsError, _super);
    function ParseSerializedCommandsError(message) {
        return _super.call(this, 'Could not parse serialized commands' + (message ? ': ' + message : '')) || this;
    }
    return ParseSerializedCommandsError;
}(Error));
//# sourceMappingURL=escposBuilder.js.map