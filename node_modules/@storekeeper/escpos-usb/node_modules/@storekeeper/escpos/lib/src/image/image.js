"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Image = exports.ImageProvider = void 0;
var constants_1 = require("../constants");
var imageCacheProvider_1 = require("./imageCacheProvider");
var debug_1 = require("../debug");
var ImageProvider = /** @class */ (function () {
    function ImageProvider() {
    }
    return ImageProvider;
}());
exports.ImageProvider = ImageProvider;
var Image = /** @class */ (function () {
    function Image(imageProvider, url, options) {
        this.imageProvider = imageProvider;
        this.url = url;
        this.options = options;
        this.options = this.options || {};
        if (this.options.width > constants_1.MAX_IMAGE_WIDTH) {
            this.options.width = constants_1.MAX_IMAGE_WIDTH;
        }
    }
    Image.prototype.toBitmap = function () {
        var density = constants_1.IMAGE_DENSITY;
        var _a = this.data.metadata, height = _a.height, width = _a.width;
        var c = density / 8;
        var ld, result = [];
        var l, i;
        // n blocks of lines
        var n = Math.ceil(height / density);
        for (var y = 0; y < n; y++) {
            // line data
            ld = result[y] = [];
            for (var x = 0; x < width; x++) {
                for (var b = 0; b < density; b++) {
                    i = x * c + (b >> 3);
                    if (ld[i] === undefined) {
                        ld[i] = 0;
                    }
                    l = y * density + b;
                    if (l < height) {
                        if (this.data.data[l * width + x]) {
                            ld[i] += (0x80 >> (b & 0x7));
                        }
                    }
                }
            }
        }
        return {
            data: result,
            density: density
        };
    };
    Image.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cachedImageData, bitmap, data, i, r, g, b, a, shouldBeWhite;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (imageCacheProvider_1.imageCacheProvider) {
                            cachedImageData = imageCacheProvider_1.imageCacheProvider.get(this.cacheKey);
                            if (cachedImageData) {
                                this.data = cachedImageData;
                                debug_1.Debug.process('Loaded image from cache');
                                return [2 /*return*/, true];
                            }
                        }
                        return [4 /*yield*/, this.imageProvider.load(this.url, this.options)];
                    case 1:
                        bitmap = _a.sent();
                        if (!bitmap)
                            return [2 /*return*/, false];
                        data = [];
                        for (i = 0; i < bitmap.data.length; i += bitmap.colors) {
                            r = bitmap.data[i];
                            g = bitmap.data[i + 1];
                            b = bitmap.data[i + 2];
                            a = bitmap.data[i + 3];
                            shouldBeWhite = r > 200 && g > 200 && b > 200 || a == 0;
                            data.push(shouldBeWhite ? 0 : 1);
                        }
                        this.data = {
                            data: data,
                            metadata: {
                                colors: bitmap.colors,
                                width: bitmap.width,
                                height: bitmap.height
                            }
                        };
                        if (imageCacheProvider_1.imageCacheProvider) {
                            imageCacheProvider_1.imageCacheProvider.set(this.cacheKey, this.data);
                        }
                        return [2 /*return*/, true];
                }
            });
        });
    };
    Object.defineProperty(Image.prototype, "cacheKey", {
        get: function () {
            return this.url + '-' + JSON.stringify(this.options);
        },
        enumerable: false,
        configurable: true
    });
    Image.load = function (provider, url, options) {
        return __awaiter(this, void 0, void 0, function () {
            var image, loaded;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        image = new Image(provider, url, options);
                        return [4 /*yield*/, image.load()];
                    case 1:
                        loaded = _a.sent();
                        if (!loaded)
                            return [2 /*return*/, null];
                        return [2 /*return*/, image];
                }
            });
        });
    };
    return Image;
}());
exports.Image = Image;
//# sourceMappingURL=image.js.map