"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DummyDevice = void 0;
var device_1 = require("./device");
var DummyDevice = /** @class */ (function (_super) {
    __extends(DummyDevice, _super);
    function DummyDevice() {
        var _this = _super.call(this) || this;
        _this.data = [];
        return _this;
    }
    DummyDevice.prototype.close = function () {
        this.emit('close');
    };
    DummyDevice.prototype.open = function () {
        if (this.connected)
            return;
        this.emit('connect');
    };
    DummyDevice.prototype.write = function (data, cb) {
        var _a;
        this.emit('data_write', data);
        cb === null || cb === void 0 ? void 0 : cb();
        (_a = this.data).push.apply(_a, Array.from(data));
    };
    DummyDevice.prototype.getData = function () {
        return this.data;
    };
    DummyDevice.prototype.getDataInUInt8Array = function () {
        return Uint8Array.from(this.data);
    };
    /**
     * Resets the data present in the dummy printer.
     */
    DummyDevice.prototype.reset = function () {
        this.data = [];
    };
    /**
     * Note: This function returns static data because its a dummy.
     */
    DummyDevice.prototype.getDeviceInfo = function () {
        return {
            id: '1',
            name: 'Dummy device',
            type: 'dummy',
            data: {
                isDummy: true
            }
        };
    };
    return DummyDevice;
}(device_1.Device));
exports.DummyDevice = DummyDevice;
//# sourceMappingURL=dummyDevice.js.map